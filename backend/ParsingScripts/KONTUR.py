import os
import time
import shutil
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from io import BytesIO 
import requests
from docx import Document
import asyncio
from concurrent.futures import ThreadPoolExecutor

import pandas as pd

BASE_URL = "https://www.kontur-extern.ru/price-download/77"
DOWNLOAD_DIR = os.environ.get("DOWNLOAD_DIR")
SELENIUM_URL = os.environ.get("SELENIUM_URL")
DOCTRANSLATOR_URL = os.environ.get("DOCTRANSLATOR_URL")

_regions = [
    ("01", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–¥—ã–≥–µ—è"),
    ("02", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω"),
    ("03", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë—É—Ä—è—Ç–∏—è"),
    ("04", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–ª—Ç–∞–π"),
]

regions = [
    ("01", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–¥—ã–≥–µ—è"),
    ("02", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω"),
    ("03", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë—É—Ä—è—Ç–∏—è"),
    ("04", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–ª—Ç–∞–π"),
    ("05", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –î–∞–≥–µ—Å—Ç–∞–Ω"),
    ("06", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ò–Ω–≥—É—à–µ—Ç–∏—è"),
    ("07", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä–∏—è"),
    ("08", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞–ª–º—ã–∫–∏—è"),
    ("09", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–∞—á–∞–µ–≤–æ-–ß–µ—Ä–∫–µ—Å–∏—è"),
    ("10", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–µ–ª–∏—è"),
    ("11", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–º–∏"),
    ("12", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª"),
    ("13", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–æ—Ä–¥–æ–≤–∏—è"),
    ("14", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–∞—Ö–∞ (–Ø–∫—É—Ç–∏—è)"),
    ("15", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è - –ê–ª–∞–Ω–∏—è"),
    ("16", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω"),
    ("17", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢—ã–≤–∞"),
    ("18", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –£–¥–º—É—Ä—Ç–∏—è"),
    ("19", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –•–∞–∫–∞—Å–∏—è"),
    ("20", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ß–µ—á–Ω—è"),
    ("21", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ß—É–≤–∞—à–∏—è"),
    ("22", "–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π"),
    ("23", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π"),
    ("24", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π"),
    ("25", "–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π"),
    ("26", "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π"),
    ("27", "–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π"),
    ("28", "–ê–º—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("29", "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("30", "–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("31", "–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("32", "–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("33", "–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("34", "–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("35", "–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("36", "–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("37", "–ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("38", "–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("39", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("40", "–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("41", "–ö–∞–º—á–∞—Ç—Å–∫–∏–π –∫—Ä–∞–π"),
    ("42", "–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("43", "–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("44", "–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("45", "–ö—É—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("46", "–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("47", "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("48", "–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("49", "–ú–∞–≥–∞–¥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("50", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("51", "–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("52", "–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("53", "–ù–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("54", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("55", "–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("56", "–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("57", "–û—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("58", "–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("59", "–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π"),
    ("60", "–ü—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("61", "–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("62", "–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("63", "–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("64", "–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("65", "–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("66", "–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("67", "–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("68", "–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("69", "–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("70", "–¢–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("71", "–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("72", "–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("73", "–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("74", "–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("75", "–ó–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π –∫—Ä–∞–π"),
    ("76", "–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("77", "–ú–æ—Å–∫–≤–∞"),
    ("78", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),
    ("79", "–ï–≤—Ä–µ–π—Å–∫–∞—è –ê–û"),
    ("83", "–ù–µ–Ω–µ—Ü–∫–∏–π –ê–û"),
    ("86", "–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –ê–û"),
    ("87", "–ß—É–∫–æ—Ç—Å–∫–∏–π –ê–û"),
    ("89", "–Ø–º–∞–ª–æ-–ù–µ–Ω–µ—Ü–∫–∏–π –ê–û"),
    ("90", "–ó–∞–ø–æ—Ä–æ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("91", "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º"),
    ("92", "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å"),
    ("93", "–î–æ–Ω–µ—Ü–∫–∞—è –Ω–∞—Ä–æ–¥–Ω–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞"),
    ("94", "–õ—É–≥–∞–Ω—Å–∫–∞—è –Ω–∞—Ä–æ–¥–Ω–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞"),
    ("95", "–•–µ—Ä—Å–æ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"),
    ("99", "–ë–∞–π–∫–æ–Ω—É—Ä")
]

def download_price_file(driver, wait):
    def download_selenium():
        try:
            link = wait.until(EC.element_to_be_clickable((
                By.XPATH, "//a[contains(text(), '–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç, —á–∞—Å—Ç—å 2')]"
            )))
            driver.execute_script("arguments[0].click();", link)
            return True
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

    def download_requests():
        try:
            print("–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ requests")
            link = wait.until(EC.element_to_be_clickable((
                By.XPATH, "//a[contains(text(), '–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç, —á–∞—Å—Ç—å 2')]"
            )))

            file_url = link.get_attribute("href")
            response = requests.get(file_url)
            
            if response.status_code == 200:
                print("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
                path = os.path.join(DOWNLOAD_DIR, f"pricelist.doc")
                with open(path, "wb") as f:
                    f.write(response.content)
                return True
            else:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False
    
    download_selenium()
    start_time = time.time()
    download_finished = False
    while not download_finished:
        time.sleep(2)
        files_list = os.listdir(DOWNLOAD_DIR)
        print(files_list)
        if len(files_list)>0:
            download_finished = True
        if time.time() - start_time > 30:
            print("‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
            break
            
    if not download_finished:
        download_finished = download_requests()

    return download_finished   

def parse_docx_from_bytes(docx_bytes: BytesIO):
    try:
        docx_bytes.seek(0)
        doc = Document(docx_bytes)

        ip_usn = ip_osno = ul_usn = ul_osno = "‚ùå"
        budget_plus = budget = "‚ùå"

        for table in doc.tables:
            for row in table.rows:
                row_text = [cell.text.strip() for cell in row.cells]
                joined = " ".join(row_text).lower()

                if "–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª—é—Å" in joined and "1 –≥–æ–¥" in joined:
                    ip_usn = row_text[2] if len(row_text) > 2 else "‚ùå"
                    ip_osno = row_text[3] if len(row_text) > 3 else "‚ùå"
                    ul_usn = row_text[4] if len(row_text) > 4 else "‚ùå"
                    ul_osno = row_text[5] if len(row_text) > 5 else "‚ùå"

                if "–±—é–¥–∂–µ—Ç–Ω–∏–∫ –ø–ª—é—Å" in joined and "1 –≥–æ–¥" in joined:
                    for item in reversed(row_text):
                        if any(ch.isdigit() for ch in item):
                            budget_plus = item
                            break

                if "–±—é–¥–∂–µ—Ç–Ω–∏–∫" in joined and "1 –≥–æ–¥" in joined and "–ø–ª—é—Å" not in joined and "–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π" not in joined:
                    for item in reversed(row_text):
                        if any(ch.isdigit() for ch in item):
                            budget = item
                            break

        return ip_usn, ul_usn, ip_osno, ul_osno, budget_plus, budget

    except Exception as e:
        return [f"–û—à–∏–±–∫–∞: {e}"] * 6

def extract_common_prices_from_bytes(docx_bytes:BytesIO):
    try:
        docx_bytes.seek(0)
        doc = Document(docx_bytes)

        target_keys = {
            "1+4": "1+4",
            "1+9": "1+9",
            "1+19": "1+19",
            "1+49": "1+49",
            "1+99": "1+99",
            "1+199": "1+199",
            "1+499": "1+499"
        }

        common_prices = {key: "‚ùå" for key in target_keys}
        found_table = False

        for table in doc.tables:
            if not table.rows or not table.rows[0].cells:
                continue

            first_cell = table.rows[0].cells[0].text.strip()
            if "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π" not in first_cell:
                continue

            found_table = True
            print("\nüìä –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫:")

            for row in table.rows[1:]:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                try:
                    col1 = row.cells[0].text.strip()
                    col2 = row.cells[1].text.strip()

                    print(f"  üîπ –°—Ç—Ä–æ–∫–∞: [{col1}] -> [{col2}]")

                    for key in target_keys:
                        if key in col1 and common_prices[key] == "‚ùå":
                            cleaned = re.sub(r"[^\d]", "", col2)
                            if cleaned:
                                common_prices[key] = int(cleaned)
                                print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {key} = {common_prices[key]}")
                            else:
                                print(f"    ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è {key}: [{col2}]")
                except Exception as e:
                    print(f"  ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏: {e}")
                    continue

            break

        if not found_table:
            print("‚ùó –¢–∞–±–ª–∏—Ü–∞ —Å '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        return [
            common_prices["1+4"],
            common_prices["1+9"],
            common_prices["1+19"],
            common_prices["1+49"],
            common_prices["1+99"],
            common_prices["1+199"],
            common_prices["1+499"],
        ]

    except Exception as e:
        return [f"–û—à–∏–±–∫–∞: {e}"] * 7

def translate_file(file_path,file_name):
    with open(file_path, "rb") as f:
        url = DOCTRANSLATOR_URL
        files = {"file": (file_name, f, "multipart/form-data")}
        response = requests.post(url, files=files)

    response.raise_for_status()

    file = BytesIO(response.content)

    return file

def init_webdriver(local = False, headless = True):
    
    options = webdriver.ChromeOptions()
    if headless:
        options.add_argument('--headless=new')
        options.add_argument('--disable-gpu')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36")
    options.add_argument("--lang=ru-RU")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--disable-extensions")
    options.add_argument("--disable-plugins")
    options.add_argument("--disable-popup-blocking")
    options.add_argument('--start-maximized')

    prefs = {
        "download.default_directory": DOWNLOAD_DIR,
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True
    }
    options.add_experimental_option("prefs", prefs)


    if local:
        driver = webdriver.Chrome(options=options)
    else:
        driver = webdriver.Remote(
            command_executor=SELENIUM_URL,
            options=options
        )

    if headless:
        driver.execute_cdp_cmd(
            "Browser.setDownloadBehavior",
            {
                "behavior": "allow",
                "downloadPath": DOWNLOAD_DIR
            }
        )

        
    return driver


def init_dataframe():
    df = pd.DataFrame(columns=["–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞", "–ò–ü (–£–°–ù)", "–ò–ü (–û–°–ù–û)", "–Æ–õ (–£–°–ù)", "–Æ–õ (–û–°–ù–û)", "–ë—é–¥–∂–µ—Ç–Ω–∏–∫ –ø–ª—é—Å", "–ë—é–¥–∂–µ—Ç–Ω–∏–∫",
                               "1+4", "1+9", "1+19", "1+49", "1+99", "1+199", "1+499"])
    return df


def read_data_row(region_id,region_name):
    latest_file = max([os.path.join(DOWNLOAD_DIR, f) for f in os.listdir(DOWNLOAD_DIR)], key=os.path.getctime)
    target_path = os.path.join(DOWNLOAD_DIR, f"{region_id}_pricelist.doc")
    if os.path.abspath(latest_file) != os.path.abspath(target_path):
        shutil.move(latest_file, target_path)

    print(f"‚úî –°–∫–∞—á–∞–Ω: {target_path}")

    file_docx = translate_file(target_path,f"{region_id}_pricelist.doc")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
    ip_usn, ul_usn, ip_osno, ul_osno, budget_plus, budget = parse_docx_from_bytes(file_docx)
    print(f"  ‚îî –ò–ü (–£–°–ù): {ip_usn}")
    print(f"  ‚îî –Æ–õ (–£–°–ù): {ul_usn}")
    print(f"  ‚îî –ò–ü (–û–°–ù–û): {ip_osno}")
    print(f"  ‚îî –Æ–õ (–û–°–ù–û): {ul_osno}")
    print(f"  ‚îî –ë—é–¥–∂–µ—Ç–Ω–∏–∫ –ø–ª—é—Å: {budget_plus}")
    print(f"  ‚îî –ë—é–¥–∂–µ—Ç–Ω–∏–∫: {budget}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã "–û–±—â–∏–π"
    common_prices = extract_common_prices_from_bytes(file_docx)
    print(f"  ‚îî 1+4: {common_prices[0]}")
    print(f"  ‚îî 1+9: {common_prices[1]}")
    print(f"  ‚îî 1+19: {common_prices[2]}")
    print(f"  ‚îî 1+49: {common_prices[3]}")
    print(f"  ‚îî 1+99: {common_prices[4]}")
    print(f"  ‚îî 1+199: {common_prices[5]}")
    print(f"  ‚îî 1+499: {common_prices[6]}")

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel
    row = [int(region_id), region_name, ip_usn, ip_osno, ul_usn, ul_osno, budget_plus, budget] + common_prices
    return row
def main():
    total_regions = len(regions)

    print("test")
    driver = init_webdriver(local=False,headless=True)

    wait = WebDriverWait(driver, 20) 

    df = init_dataframe()

    # === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
    for idx, (region_id, region_name) in enumerate(regions, 1):
        print(f"\n‚û° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {region_id} ‚Äì {region_name} ({idx}/{total_regions})")

        try:
            driver.get(BASE_URL.replace("77", region_id))

   

            for f in os.listdir(DOWNLOAD_DIR):
                try:
                    os.remove(os.path.join(DOWNLOAD_DIR, f))
                except:
                    pass
            wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))

            if download_price_file(driver, wait):
                df.loc[len(df)] = read_data_row(region_id,region_name)
                # print(df)
                # time.sleep(10)
            else: print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –¥–ª—è")
            



        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ {region_id} ‚Äì {region_name}: {e}")

        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {region_name} ({round(idx / total_regions * 100, 1)}%)")

    # === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
    driver.quit()

    return df


async def async_selenium():
    loop = asyncio.get_running_loop() 
    with ThreadPoolExecutor() as executor:
        df = await loop.run_in_executor(executor, main)
    return df


async def parse_kontur():
    df = await async_selenium()
    return df

if __name__ == "__main__":
    for key, value in dict(os.environ).items():
        print(f"{key}: {value}")
    df = main()
    df.to_excel("text.xlsx")